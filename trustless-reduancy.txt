Trustless Redundancy Through Stake Weighted Routing Proofs & Sybil Resistance

Introduction

Useful redundancy in a service ensures that one has access to providers, custodians whose risks of failure or catastrophe are largely independent of one another. One file with five copies in the same data center, machine, or disk concentrates the risk of a single event affecting all five copies; such replication is not ideal. Ownership of distributed storage, or *trust* in those purporting to have, *might* grant one decorrelation of geographically mediated risk, as it may also allow one to decorrelate management risk by using distinctly managed providers.

Without trust, there is no strong assurance to be had that a single independent node can ascertain that any provider is both truly distributing their machines or even that multiple providers are not one under different banners. Stake Weighted Routing Proofs is a middleware scheme atop a Sybil Resistant blockchain which relates information available in consensus-validated routing networks to probabilistic assurance of geographically separated and independently managed machines.

Naive Solutions

Proving that two computers are geographically separated is a difficult task, yet through normal use of the internet it is determined constantly and at almost zero cost simply by measuring the relative ping delay between different servers. Because data centers almost always have incentive to serve users as quickly as possible, the ping time to them can often be assumed the best possible time, which grants useful information about their location.

But as these servers start gaining the ability to make money based off their location, they also gain an interest in lying about their true routing capabilities. If a large demand for distributed storage bubbled up, a single server could pose as many by delaying the propagation of responses in order to make itself appear further away, to any degree it wishes, than it truly is from its peers. If peers believe this to be proof of geographic independence, they may inadvertently pay for 'distributed' storage which actually all sits on a single machine.

Because the normal incentive for a web server to respond quickly is difficult to measure and easy to selectively defect from, that heuristic for location becomes unreliable when any reason to cheat is introduced. There are clever tactics one might employ to catch servers cheating if they themselves or a community have access to two or more geographically separated machines, but independent users must devolve back to trust assumptions in order to exploit such tricks.

A Strong Incentive for Speed

What is required from nodes wishing to prove their geographic separation is a strong and measurable incentive to route data as quickly as possible - along with *public proof* of such fulfillments which is *bound* trustlessly to public key pairs. When routing speed serves provably as source of better income than that of the redundancy service, defection from that speed is costly, and for other reasons, public. Therefore, a protocol which strongly incentivizes speed restores the ability to assume that prominent nodes are routing as quickly as they can, and the instantiation of such a protocol on blockchain offers public access to verifiable heuristics informing those in the market for redundancy.

To further describe how such a redundancy market would operate, it is necessary to understand some details behind a blockchain protocol which produces these heuristics. For this description, the Saito Consensus Mechanism will serve as the standard: importantly, nodes compete to route transactions into blocks before each other and are allowed to cryptographically co-sign a fraction of the total transaction reward to an additional relay node who will, ideally, lower the time it takes for a transaction to make its way into a valid block.

Nodes which fail to effectively network will be outcompete in general by those who do, and nodes who *spoof* their networking will have the same routing abilities as if they failed to collaborate, but will also fractionalize the reward of any nodes who send transactions to their fraudulent operation. Likewise for inefficient routing relays - if the nodes around such relays discover they can communicate more directly, they can each increase their rewards by cutting out middlemen of marginal value. The most expensive middlemen are those who simply keep their transactions on a single machine but co-sign to themselves - these are therefore the most likely nodes to be cut from routing paths.

Spoofed nodes are a pure cost for their peers and thus are naturally cut out; the network selects for distinct machines in any particular routing path and keeps a record of those involved via the routing signatures attached to valid transactions. Nodes in the market for redundancy services, specifically seeking nodes which are geographically distinct, can leverage the fact that posing one machine as multiple will encourage peers to stop co-signing transactions to, or in more extreme cases require the node spend their own money to consistently fabricate transactions which make them appear legitimate.

Much like EigenLayer on Ethereum packs extra functionality and reward into the base Ethereum Consensus layer by augmenting stake and slashing conditions, a protocol atop Saito can leverage its Sybil Resistance to identify nodes who are likely independently managed and located. The basic premise is not much more complicated than that, but there are various implementation details for redundancy services to raise the cost of spoofing and thus increase their value in the market. 

Stake Weighted Routing Proofs

Black-boxxing other considerations present in, and using trustless cloud storage as the operating example; whose primary remaining problem is the one solved in this overview, routing nodes in Saito could opt in to store data for arbitrary customers and earn profits in addition to their consensus level operations. There are possibly numerous ways storage shoppers could adequately discover a selection of nodes selling such a service which are likely geographically independent.

One method is simply selecting storage nodes in sequential blocks. Since the 'work' necessary for block production gains value through propagation then inclusion in blocks, it is natural to assume that the work in any particular block will bear a concentration of transactions and routing signatures roughly centered at some routing distance from the block producer. When the work associated with that radius is used up in a block, the work in another radius will have a head start and thus the next block will represent work from that distinct region - giving the blockchain a 'round-robin' dynamic for block production.

The exact nature of this is yet unobserved - it could be that two primary centers of the network take turns making blocks, or that several diverse regions around the globe go roughly in a cycle, or none of the above. The following details will not assume this is a reliable metric, but it should be mentioned as it is the simplest *possible* metric for geographic decentralization and if proven true will no doubt be of primary use in this protocol.

Yet even if such turn-taking dynamics were to exist, one would be limited in nodes which are likely redundant to the length of the cycle; if the cycle length is two i.e. only two primary centers produce blocks, then those seeking redundancy through only round-robin assumptions could only use such determinations to discover one geographically distinct service provider from each region.

Another seemingly obvious strategy is to simply pick any routing node open to perform storage services from a recent block - after all, the network already has incentives in place to push out Sybils and only collaborate and sign for nodes who provide enhanced routing, for which geographic separation is a prerequisite. And it is true that Sybilling, or spoofing, requires paying a network tax which cannot be equally rewarded and in alienating oneself from collaborators - the practice is not sustainable, but it is *possible,* therefore, storage nodes who wish to provide fake redundancy may opportunistically pay such a cost if it means they can generate outsized demand for their storage, so selecting at random may not be the most optimal criteria.

Since spoofing is possible, but not sustainable, the solution titled *Stake Weighted Routing Proof* is one which at its core selects for nodes who maintain their profitable and productive status by having their routing signatures included in many blocks over some historic time-frame. The ability to sustain unprofitable and uncooperative behavior decreases with time in Saito, so proof of continued effective routing practices provides evidence that a node is either burning profits or truly unique. Weighting credibility by some locked up stake associated with a public key will more greatly enhance this proof, since locking that same amount up in Sybil nodes multiplies the cost.

In this way storage nodes can compete for demand by locking tokens to their public keys and showing a productive history contributing to blocks via their routing signatures. Any two nodes who can provide such a Stake Weighted Routing Proof have a much stronger chance of being distinct than two random nodes with no history and no locked tokens. Any network topology heuristics which would like to apply on top of these proofs, such as assumptions on the round-robin nature of block production or other meta-data is icing on the cake.
